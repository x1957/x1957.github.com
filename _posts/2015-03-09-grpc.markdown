---
layout: post
title:  "grpc"
date:   2015-03-09 12:34:08
categories: jekyll update
---

[grpc](http://www.grpc.io/)已经开源半个多月了，终于空下来可以玩玩了。

看官网的说明，应该就是Google内部用的那个叫stubby的rpc框架，正好去年实习的时候用过。

然后就开始了纠结的编译安装路程T_T

在装grpc的时候，提示说protobuf没有装，但是我真的装了嘛。。。实在是没办法了，把Makefile里面的INSTALL_OK强制设置为了true，然后装上了。

准备写个demo试试！用的golang，然后要先安装golang的支持

<code>go get google.golang.org/grpc</code>

就这个过程一直报错。。。Google了一下说是GOROOT没设置等原因，然后我把什么都设置好了，还是不行。。。
感觉都快崩溃了。

然后输出看了看哪儿错了

<code>go get -v google.golang.org/grpc</code>

结果是。。。首先因为是用的旁人poxychains4 + shadowsocks翻墙的，但是提示的是。。什么protocol....
好吧，换vpn。。。然后一切ok。。。。fuck GFW。。。

然后就开始开心的写demo了

{% highlight go %}

syntax = "proto3";

package test;

service Add {
	rpc DoAdd1(Int) returns (Int) {}
}

message Int {
	int32 num = 1;
}

{% endhighlight %}

很简单的东西，一个服务，add1.

然后<code>protoc test.proto --go_out=plugins=grpc:./src/test</code>

记住是plugins，我之前用的是plugin。。。然后就是错的。。。。T_T，不然不会生成rpc相关代码的。。。

这时候就生成了test.pb.go，打开看下，反正都是rpc相关的，我们不用修改啥。

然后我们来写server端

{% highlight go %}

package main

import pb "test"
import "log"
import "net"
import "os"

import "golang.org/x/net/context"
import "google.golang.org/grpc"

func main() {
	log.SetOutput(os.Stdout)
	lis, err := net.Listen("tcp", port)
	if err != nil {
		log.Fatalf("failed : %v", err)
	}

	s := grpc.NewServer()
	pb.RegisterAddServer(s, &server{})
	log.Println("server...")
	s.Serve(lis)
}

const (
	port = ":1957"
)

type server struct{}

func (s *server) DoAdd1(ctx context.Context, intx *pb.Int) (*pb.Int, error) {
	log.Printf("add")
	var n int32
	n = intx.Num
	out := new(pb.Int)
	out.Num = n + 1
	return out, nil
}

{% endhighlight %}

简单把，就是实现这个DoAdd1就好了哦。。。

看看client的代码

{% highlight go %}
package main

import (
	"log"
	"os"

	pb "test"

	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

const (
	address = "localhost:1957"
)

func main() {
	log.SetOutput(os.Stdout)

	conn, err := grpc.Dial(address)
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	c := pb.NewAddClient(conn)

	intx := new(pb.Int)
	intx.Num = 1
	r, err := c.DoAdd1(context.Background(), intx)
	if err != nil {
		log.Fatalf("fail!  %v", err)
	}
	log.Printf("%d\n", r.Num)
}
{% endhighlight %}

非常方便的一个框架！

{% highlight shell %}
APTX4869:grpc_test x1957$ go run server.go
2015/03/09 12:49:18 server...
2015/03/09 12:49:40 add
2015/03/09 12:49:43 add

APTX4869:grpc_test x1957$ go run client.go 
2015/03/09 12:49:43 2
{% endhighlight %}
